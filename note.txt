const handleSignIn = () => {
    setError();
    setLoading(true);
    if (email === "" || password === "") {
      setError("Required field is missing");
      setLoading(false);
    } else if (!validateEmail(email)) {
      setError("Email is malformed");
      setLoading(false);
    } else {
      signInWithEmailAndPassword(auth, email, password)
        .then((res) => {
          // console.log(res);
          history.push("/");
          setLoading(false);
        })
        .catch((error) => {
          console.log(error.code);
          setError(error.message);
          setLoading(false);
        });
    }
  };

  const handleRegister = () => {
    setError("");
    setLoading(false);
    if (email === "" || password === "" || username === "") {
      setError("Required field is missing.");
      setLoading(false);
    } else if (!validateEmail(email)) {
      setError("Email is malformed");
      setLoading(false);
    } else {
      createUserWithEmailAndPassword(auth, email, password)
        .then((res) => {
          // console.log(res);
          history.push("/");
          setLoading(false);
        })
        .catch((error) => {
          console.log(error);
          setError(error.message);
          setLoading(false);
        });
    }
  };

   const handleGoogleSignIN = () => {
    setLoading(true);
    signInWithPopup(auth, provider)
      .then((res) => {
        setLoading(false);
        // console.log(res);
        history.push("/");
        // return (
        //   <>

        //   </>
        // );
      })
      .catch((error) => {
        setLoading(false);
        console.log(error);
      });
  };


Auth.js

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { app } from "../firebase";
import "./auth.css";
import {
  createUserWithEmailAndPassword,
  signInWithPopup,
  getAuth,
  GoogleAuthProvider,
  FacebookAuthProvider,
  GithubAuthProvider,
} from "firebase/auth";
import { validateJWTToken } from "../services/api";

function Auth() {
  const history = useNavigate();
  const [register, setRegister] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [username, setUsername] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const firebaseAuth = getAuth(app);
  const provider = new GoogleAuthProvider();
  const provider1 = new FacebookAuthProvider();
  const provider2 = new GithubAuthProvider();

  function validateEmail(email) {
    const reg = /^([A-Za-z0-9_\-.])+@([A-Za-z0-9_\-.])+\.([A-Za-z]{2,4})$/;
    if (reg.test(email) === false) {
      return false;
    } else return true;
  }

  const loginWithGoogle = async () => {
    await signInWithPopup(firebaseAuth, provider).then((cred) => {
      firebaseAuth.onAuthStateChanged((cred) => {
        if (cred) {
          cred.getIdToken().then((token) => {
            console.log(token);
            validateJWTToken(token).then((data) => {
              console.log(data);
            });
            history("/", { replace: true });
          });
        }
      });
    });
  };

  const loginWithGithub = async () => {
    await signInWithPopup(firebaseAuth, provider2).then((cred) => {
      firebaseAuth.onAuthStateChanged((cred) => {
        if (cred) {
          cred.getIdToken().then((token) => {
            console.log(token);
            validateJWTToken(token).then((data) => {
              console.log(data);
            });
            history("/", { replace: true });
          });
        }
      });
    });
  };

  const loginWithFacebook = async () => {
    await signInWithPopup(firebaseAuth, provider1).then((cred) => {
      firebaseAuth.onAuthStateChanged((cred) => {
        if (cred) {
          cred.getIdToken().then((token) => {
            console.log(token);
            validateJWTToken(token).then((data) => {
              console.log(data);
            });
            history("/", { replace: true });
          });
        }
      });
    });
  };

  const signUpWithEmailAndPassword = async () => {
    if (email === "" || password === "" || username === "") {
      alert("Required field is missing!");
    } else if (!validateEmail(email)) {
      setError("Email is malformed");
      setLoading(false);
    } else {
      if (password) {
        setEmail("");
        setPassword("");
        console.log("equal");
        try {
          await createUserWithEmailAndPassword(
            firebaseAuth,
            email,
            password
          ).then((usercred) => {
            firebaseAuth.onAuthStateChanged((cred) => {
              if (cred) {
                cred.getIdToken().then((token) => {
                  validateJWTToken(token).then((data) => {
                    console.log(data);
                    console.log("Signup successful!");
                  });
                  history("/", { replace: true });
                });
              }
            });
          });
        } catch (error) {
          if (error.code) {
            alert("Email is already in use. Please sign in instead.");
          }
        }
      }
    }
  };

  const signInWithEmailAndPassword = async () => {
    if (email === "" || password === "") {
      alert("Required field is missing!");
    } else {
      try {
        await signInWithEmailAndPassword(firebaseAuth, email, password);
        firebaseAuth.onAuthStateChanged((cred) => {
          if (cred) {
            cred.getIdToken().then((token) => {
              validateJWTToken(token).then((data) => {
                console.log(data);
                console.log("SignIn successful!");
              });
              history("/", { replace: true });
            });
          }
        });
      } catch (error) {
        console.log(error);
        alert("Error signing in. Please try again later.");
      }
    }
  };

  return (
    <div className="auth">
      <div className="auth-container">
        <p>Add another way to log in using any of the following services. </p>
        <div className="sign-options">
          <div onClick={loginWithGoogle} className="single-option">
            <img
              alt="google"
              src="https://cdn.iconscout.com/icon/premium/png-512-thumb/google-2752174-2284991.png?f=webp&w=256"
            />
            <p>{loading ? "Signing in..." : "Login with Google"}</p>
          </div>
          <div className="single-option" onClick={loginWithGithub}>
            <img
              alt="github"
              src="https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png"
            />
            <p>Login with Github</p>
          </div>
          <div className="single-option" onClick={loginWithFacebook}>
            <img
              alt="facebook"
              src="https://cdn0.iconfinder.com/data/icons/social-circle-3/72/Facebook-512.png"
            />
            <p>Login with Facebook</p>
          </div>
        </div>
        <div className="auth-login">
          <div className="auth-login-container">
            {register ? (
              <>
                {" "}
                <div className="input-field">
                  <p>Username</p>
                  <input
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    type="text"
                  />
                </div>
                <div className="input-field">
                  <p>Email</p>
                  <input
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    type="text"
                  />
                </div>
                <div className="input-field">
                  <p>Password</p>
                  <input
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    type="password"
                  />
                </div>
                <button
                  onClick={signUpWithEmailAndPassword}
                  disabled={loading}
                  style={{
                    marginTop: "10px",
                  }}
                >
                  {loading ? "Registering..." : "Register"}
                </button>
              </>
            ) : (
              <>
                <div className="input-field">
                  <p>Email</p>
                  <input
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    type="text"
                  />
                </div>
                <div className="input-field">
                  <p>Password</p>
                  <input
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    type="password"
                  />
                </div>
                <button
                  onClick={signInWithEmailAndPassword}
                  disabled={loading}
                  style={{
                    marginTop: "10px",
                  }}
                >
                  {loading ? "Logging in..." : "Login"}
                </button>
              </>
            )}

            <p
              onClick={() => setRegister(!register)}
              style={{
                marginTop: "10px",
                textAlign: "center",
                color: "#0095ff",
                textDecoration: "underline",
                cursor: "pointer",
              }}
            >
              {register ? "Login" : "Register"} ?
            </p>
          </div>
        </div>
        {error !== "" && (
          <p
            style={{
              color: "red",
              fontSize: "14px",
            }}
          >
            {error}
          </p>
        )}
      </div>
    </div>
  );
}
export default Auth;


 <div className="auth">
      <div className="auth-container">
        <p>Add another way to log in using any of the following services. </p>
        <div className="sign-options">
          <div onClick={loginWithGoogle} className="single-option">
            <img
              alt="google"
              src="https://cdn.iconscout.com/icon/premium/png-512-thumb/google-2752174-2284991.png?f=webp&w=256"
            />
            <p>{loading ? "Signing in..." : "Login with Google"}</p>
          </div>
          <div className="single-option" onClick={loginWithGithub}>
            <img
              alt="github"
              src="https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png"
            />
            <p>Login with Github</p>
          </div>
          <div className="single-option" onClick={loginWithFacebook}>
            <img
              alt="facebook"
              src="https://cdn0.iconfinder.com/data/icons/social-circle-3/72/Facebook-512.png"
            />
            <p>Login with Facebook</p>
          </div>
        </div>
        <div className="auth-login">
          <div className="auth-login-container">
            {register ? (
              <>
                {" "}
                <div className="input-field">
                  <p>Username</p>
                  <input
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    type="text"
                  />
                </div>
                <div className="input-field">
                  <p>Email</p>
                  <input
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    type="text"
                  />
                </div>
                <div className="input-field">
                  <p>Password</p>
                  <input
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    type="password"
                  />
                </div>
                <button
                  onClick={signUpWithEmailAndPassword}
                  disabled={loading}
                  style={{
                    marginTop: "10px",
                  }}
                >
                  {loading ? "Registering..." : "Register"}
                </button>
              </>
            ) : (
              <>
                <div className="input-field">
                  <p>Email</p>
                  <input
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    type="text"
                  />
                </div>
                <div className="input-field">
                  <p>Password</p>
                  <input
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    type="password"
                  />
                </div>
                <button
                  onClick={signInWithEmailAndPassword}
                  disabled={loading}
                  style={{
                    marginTop: "10px",
                  }}
                >
                  {loading ? "Logging in..." : "Login"}
                </button>
              </>
            )}

            <p
              onClick={() => setRegister(!register)}
              style={{
                marginTop: "10px",
                textAlign: "center",
                color: "#0095ff",
                textDecoration: "underline",
                cursor: "pointer",
              }}
            >
              {register ? "Login" : "Register"} ?
            </p>
          </div>
        </div>
        {error !== "" && (
          <p
            style={{
              color: "red",
              fontSize: "14px",
            }}
          >
            {error}
          </p>
        )}
      </div>
    </div>


      const history = useNavigate();
  const [register, setRegister] = useState(false);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [username, setUsername] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);



  .auth {
    display: flex;
    flex-direction: column;
    /* width: 100vw; */
    height: 90vh;
    padding: 30px 0;
    background-color: #eee;
  }
  
  .auth-container {
    display: flex;
    flex-direction: column;
    width: 100%;
    align-items: center;
    justify-content: center;
  }
  
  .auth-container > p {
    margin-bottom: 30px;
    font-size: 1.5rem;
  }
  
  .sign-options {
    display: flex;
    flex-direction: column;
    width: 300px;
  }
  
  .single-option {
    display: flex;
    padding: 9px;
    margin: 5px 0;
    border-radius: 3px;
    color: rgba(0, 0, 0, 0.8);
    background-color: #fff;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
      0 6px 20px 0 rgba(66, 42, 42, 0.19);
    cursor: pointer;
    transition: all 0.3s;
  }
  
  .single-option:hover {
    box-shadow: 0 4px 8px 0 #0095ff15, 0 6px 20px 0 #0095ff52;
  }
  
  .single-option > p {
    margin-left: 10px;
    
  }
  img {
    width: 50px;
   height: 50px;
  }
  
  .auth-login {
    display: flex;
    margin: 40px 0;
    width: 300px;
  }
  
  .auth-login-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    padding: 20px;
    background-color: #fff;
    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2),
      0 6px 20px 0 rgba(66, 42, 42, 0.19);
    border-radius: 3px;
  }
  
  .input-field {
    display: flex;
    flex-direction: column;
  }
  
  .input-field > p {
    font-size: 1.1rem;
    margin: 10px 0;
  }
  
  .input-field > input {
    padding: 10px;
    border: 1px solid #0095ff8e;
    background-color: transparent;
    border-radius: 3px;
    outline: none;
  }